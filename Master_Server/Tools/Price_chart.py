# Chart creator used on the master Duino-Coin server
# Created in 2019, put through many modifications through 2020 and 2021
# revox from the Duino team

import matplotlib
import datetime
from scipy.interpolate import make_interp_spline, BSpline
from scipy.interpolate import interp1d
import matplotlib.dates as mdates
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import numpy as np
import traceback
import github
import os
import time
from pathlib import Path
import json

base_dir = ""
pricefile = base_dir+"prices.txt"
pricefile_bch = base_dir+"prices_bch.txt"
pricefile_trx = base_dir+"prices_trx.txt"
pricefile_nodes = base_dir+"pricesNodeS.txt"
pricefile_justswap = base_dir+"pricesJustSwap.txt"
pricefile_otc = base_dir+"pricesotc-trading.txt"

dayinterval = 3
length = 20
outputfile = "/home/debian/websites/duino-coin-websocket-proxy/prices.png"
chartColors = [
    "#1dd1a1",  # DE - XMG - greenish
    "#F97F51",  # NS - USD - orange
    "#3c40c6",  # JS - TRX - purple
    "#0fbcf9",  # OT - USD - blue
    "#feca57",  # DE - BCH - yellow
    "#ff3f34",  # DE - TRX - red
]


def splitData(pricefile):
    """
    Read prices from text file generated by the server to list
    """
    priceList = []
    with open(pricefile) as file:
        content = file.read()
        priceList = content.replace("\n", "").split(",")
    return priceList


def createGraph(y_ducoe,
                y_ducoe_bch,
                y_ducoe_trx,
                y_nodes,
                y_justswap,
                y_otc,
                dayinterval,
                length,
                outputfile,
                chartColors):
    """
    Create matplotlib price graph with given arguments
    """
    now = datetime.datetime.now() - datetime.timedelta(days=len(y_ducoe))
    then = now + datetime.timedelta(days=len(y_ducoe))
    days = mdates.drange(
        now,
        then,
        datetime.timedelta(days=1))
    xnew = np.linspace(
        days.min(),
        days.max(),
        len(y_ducoe))

    spl = interp1d(days, y_ducoe_bch)
    y_smooth_bch = spl(xnew)

    spl = interp1d(days, y_ducoe_trx)
    y_smooth_trx = spl(xnew)

    spl = interp1d(days, y_ducoe)
    y_smooth = spl(xnew)

    spl = interp1d(days, y_nodes)
    y_smooth_nodes = spl(xnew)

    spl = interp1d(days, y_justswap)
    y_smooth_justswap = spl(xnew)

    spl = interp1d(days, y_otc)
    y_smooth_otc = spl(xnew)

    plt.gca().xaxis.set_major_formatter(
        mdates.DateFormatter("%m-%d be"),)
    plt.gca().xaxis.set_major_locator(
        mdates.DayLocator(interval=dayinterval))
    plt.gcf().subplots_adjust(
        bottom=0.2)

    plt.plot(
        xnew,
        y_smooth,
        "-ok",
        linewidth=2,
        color=chartColors[0])

    plt.plot(
        xnew,
        y_smooth_nodes,
        "-ok",
        linewidth=2,
        color=chartColors[1])

    plt.plot(
        xnew,
        y_smooth_justswap,
        "-ok",
        linewidth=2,
        color=chartColors[2])

    plt.plot(
        xnew,
        y_smooth_otc,
        "-ok",
        linewidth=2,
        color=chartColors[3])

    plt.plot(
        xnew,
        y_smooth_trx,
        "-ok",
        linewidth=2,
        color=chartColors[5])

    plt.plot(
        xnew,
        y_smooth_bch,
        "-ok",
        linewidth=2,
        color=chartColors[4])

    patchDE = mpatches.Patch(
        color=chartColors[0],
        label="DUCO Exchange (XMG) ($" + str(y_ducoe[-1]) + ")")

    patchDEBCH = mpatches.Patch(
        color=chartColors[4],
        label="DUCO Exchange (BCH) ($" + str(y_ducoe_bch[-1]) + ")")

    patchDETRX = mpatches.Patch(
        color=chartColors[5],
        label="DUCO Exchange (TRX) ($" + str(y_ducoe_trx[-1]) + ")")

    patchJS = mpatches.Patch(
        color=chartColors[2],
        label="JustSwap (TRX) ($" + str(y_justswap[-1]) + ")")

    patchNE = mpatches.Patch(
        color=chartColors[1],
        label="Node-S Exchange (USD) ($" + str(y_nodes[-1]) + ")")

    patchOTC = mpatches.Patch(
        color=chartColors[3],
        label="otc-trading (USD) ($" + str(y_otc[-1]) + ")")

    plt.xticks(
        rotation=45,
        color="#777777")
    plt.yticks(
        rotation=0,
        color="#777777")

    plt.title(
        "Duino-Coin (DUCO) price in USD, last "
        + str(length)
        + " days",
        color="#777777")
    plt.legend(
        handles=[patchDE,
                 patchDEBCH,
                 patchDETRX,
                 patchNE,
                 patchJS,
                 patchOTC],
        labelcolor="#777777",
        framealpha=0,
        prop={'size': 8},
        loc='upper left')

    plt.savefig(
        outputfile,
        dpi=300,
        transparent=True)
    plt.show()


if __name__ == "__main__":
    y_ducoe = splitData(pricefile)[-length:]
    y_ducoe_bch = splitData(pricefile_bch)[-length:]
    y_ducoe_trx = splitData(pricefile_trx)[-length:]
    y_nodes = splitData(pricefile_nodes)[-length:]
    y_justswap = splitData(pricefile_justswap)[-length:]
    y_otc = splitData(pricefile_otc)[-length:]
    createGraph(
        y_ducoe, y_ducoe_bch, y_ducoe_trx, y_nodes, y_justswap, y_otc,
        dayinterval, length, outputfile, chartColors)

    print("Successfully updated the price plot")
